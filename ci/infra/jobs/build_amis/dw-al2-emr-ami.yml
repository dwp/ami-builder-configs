jobs:
  - name: untested-dw-al2-emr-ami
    plan:
      - get: hardened-ami-id
        trigger: true
        passed:
          - dw-al2-test-and-promote-hardened-ami
      - get: dw-al2-emr-ami-config
        trigger: true
      - get: dw-al2-base-ami-template
        trigger: false
      - get: dw-al2-hardened-ami-config
        trigger: false
      - .: (( inject meta.plan.generate-manifest ))
        config:
          params:
            AMI_NAME: untested-dw-al2-emr-ami
            SOURCE_AMI_NAME: dw-al2-hardened-ami-*
            SOURCE_AMI_OWNER: ((aws_account.management))
            PROVISION_SCRIPT_KEYS: '["dw-al2-emr-ami-config/dw-al2-emr-ami/dw-emr-ami-install.sh"]'
            PROVISIONER_TYPE_FILE_SOURCE: "dw-al2-emr-ami-config/dw-al2-emr-ami/"
      - .: (( inject meta.plan.packer-bootstrap ))
        input_mapping:
          source_config: dw-al2-hardened-ami-config
          source_template: dw-al2-base-ami-template
      - .: (( inject meta.plan.build-ami ))
        config:
          inputs:
            - name: dw-al2-emr-ami-config
      - put: untested-dw-al2-emr-ami
        params:
          file: built-ami/id

  - name: validate-emr-ami
    plan:
      - get: untested-dw-al2-emr-ami
        trigger: true
        passed:
          - untested-dw-al2-emr-ami
      - get: analytical-dataset-generation
        trigger: true
      - .: (( inject meta.plan.validate-ami ))
        config:
          params:
            UNTESTED_AMI: untested-dw-al2-emr-ami
          inputs:
            - name: analytical-dataset-generation
            - name: untested-dw-al2-emr-ami
      - put: emr-ami-id
        params:
          file: tested_ami/id

  - name: dw-al2-emr-ami
    plan:
      - get: source_ami
        resource: emr-ami-id
        trigger: true
        passed:
          - validate-emr-ami
      - .: (( inject meta.plan.promote-ami ))

  - name: dw-al2-emr-ami-pr
    max_in_flight: 1
    plan:
      - get: dw-al2-emr-ami-pr
        trigger: true
        version: every
      - get: dw-al2-base-ami-template
        trigger: false
      - put: dw-al2-emr-ami-pr
        params:
          path: dw-al2-emr-ami-pr
          status: pending
      - .: (( inject meta.plan.get-al2-hardened-ami ))
        trigger: false
      - .: (( inject meta.plan.generate-manifest ))
        input_mapping:
          source_ami: dw-al2-hardened-ami
        config:
          params:
            AMI_NAME: pr-dw-al2-emr-ami
            SOURCE_AMI_NAME: dw-al2-hardened-ami-*
            SOURCE_AMI_OWNER: ((aws_account.management))
            AMI_USERS: ((aws_account.development))
            PROVISION_SCRIPT_KEYS: '["dw-al2-emr-ami-pr/dw-al2-emr-ami/dw-emr-ami-install.sh"]'
            PROVISIONER_TYPE_FILE_SOURCE: "dw-al2-emr-ami-pr/dw-al2-emr-ami/"
      - .: (( inject meta.plan.packer-bootstrap ))
        input_mapping:
          source_config: dw-al2-emr-ami-pr
          source_template: dw-al2-base-ami-template
      - .: (( inject meta.plan.build-ami ))
        config:
          params:
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
          inputs:
            - name: dw-al2-emr-ami-pr
        on_failure:
          put: dw-al2-emr-ami-pr
          params:
            path: dw-al2-emr-ami-pr
            status: failure
        on_success:
          put: dw-al2-emr-ami-pr
          params:
            path: dw-al2-emr-ami-pr
            status: success
